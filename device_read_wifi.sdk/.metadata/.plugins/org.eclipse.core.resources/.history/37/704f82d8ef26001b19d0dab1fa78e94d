/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>

#include "platform.h"
#include "xil_printf.h"
#include "xuartlite.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xscugic.h"
#include "sleep.h"
#include "xil_exception.h"
#include "xscutimer.h"

#include "ads8688.h"
#include "utils.h"
#include "wifi.h"
#include "cov.h"
#include "timer.h"

#define UART_DEVICE_ID XPAR_UARTLITE_0_DEVICE_ID
#define AD_DEVICE_ID_0 XPAR_GPIO_0_DEVICE_ID
#define AD_DEVICE_ID_1 XPAR_GPIO_1_DEVICE_ID
#define ZERO_DEVICE_ID XPAR_GPIO_1_DEVICE_ID
#define SW_BTN_ID XPAR_GPIO_2_DEVICE_ID
#define CTL_ID XPAR_GPIO_3_DEVICE_ID

#define DATA_LENGTH 256

#define UARTLITE_IRPT_INTR	  XPAR_FABRIC_AXI_UARTLITE_0_INTERRUPT_INTR
#define SW_L 0x03
#define BTN_L 0x0F
#define CTL_L 0x07


XGpio SW,BTN,CTL;
u16 device_data[6][DATA_LENGTH];
u16 sample_data[3][DATA_LENGTH];
u8 kind_ptr=0;
int BTN_state,SW_state;

u8 work_mode;

int init(void);
void GPIO_init(void);
void sample(void);
void work(void);
void store(void);
void GPIO_test(void);
void processing(void);


u16 addr = 0;
u16 v;
u16 over_zero;
int sample_cnt;
int cnt_flag=0;
int Status;

int main()
{
    init_platform();
	delay_ms(4000);
    printf("Hello World\n\r");
    init();
	while(1)
	{
//		 GPIO_test();
		sample();
		processing();
	}
	cleanup_platform();
    return 0;
}
void GPIO_init()
{
	XGpio_Initialize(&BTN,SW_BTN_ID);
	XGpio_Initialize(&SW,SW_BTN_ID);
	XGpio_Initialize(&CTL,CTL_ID);
	XGpio_SetDataDirection(&BTN,2,BTN_L);
	XGpio_SetDataDirection(&SW,1,SW_L);
	XGpio_SetDataDirection(&CTL,1,~CTL_L);
}
void GPIO_test()
{
	BTN_state=XGpio_DiscreteRead(&BTN,2);
	SW_state=XGpio_DiscreteRead(&SW,1);
	XGpio_DiscreteWrite(&CTL,1,0x07);
	printf("%d\t%d\n",BTN_state,SW_state);
}
int init(void)
{
	ads8688_init(AD_DEVICE_ID_0,AD_DEVICE_ID_1);
	zero_init(ZERO_DEVICE_ID);
	GPIO_init();

	/////////////////////
	//load_device_data();  device_data and kind_ptr     -------------------@HHT
	/////////////////////

	delay(20);
	// int status;
	// status = int_init2(INT_DEVICE_ID,&UartLiteInst);
	// if(status != XST_SUCCESS) return XST_FAILURE;
}

void sample()
{
	while(is_zero()==1)
		if(is_zero()==0) break;
	while(is_zero()==0)
		if(is_zero()==1) break;
	
	for(int i=0;i<DATA_LENGTH;i++)
	{
		for(int channel=0;channel<3;channel++)
			sample_data[channel][i] = get_voltage(channel);
		delay_us(393);
	}
//	for(int i=0;i<DATA_LENGTH;i++)
//	{
//		printf("%d\n",sample_data[0][i]);
//	}
//	printf("---------------\n");
}
void processing()
{
	BTN_state=XGpio_DiscreteRead(&BTN,2);
	switch (BTN_state)
	{
	case 0x01:
		time = 5;
		printf("#1 will be shut down after %d s\n",time-TimerExpired);
		Status = ScuTimerIntrExample(&IntcInstance, &TimerInstance,
				TIMER_DEVICE_ID, TIMER_IRPT_INTR);
		if (Status != XST_SUCCESS) {
			xil_printf("SCU Timer Interrupt Example Test Failed\r\n");
		}
		break;
	case 0x02:
		time = 10;
		printf("#1 will be shut down after %d s\n",time-TimerExpired);
		Status = ScuTimerIntrExample(&IntcInstance, &TimerInstance,
				TIMER_DEVICE_ID, TIMER_IRPT_INTR);
		if (Status != XST_SUCCESS) {
			xil_printf("SCU Timer Interrupt Example Test Failed\r\n");
		}
		break;
	case 0x04:
		time = 30;
		printf("#1 will be shut down after %d s\n",time-TimerExpired);
		Status = ScuTimerIntrExample(&IntcInstance, &TimerInstance,
				TIMER_DEVICE_ID, TIMER_IRPT_INTR);
		if (Status != XST_SUCCESS) {
			xil_printf("SCU Timer Interrupt Example Test Failed\r\n");
		}
		break;
	case 0x08:
		printf("#1 is working now.\n");
		XGpio_DiscreteWrite(&CTL,1,0x00);
		break;
	default:
		break;
	}
	SW_state=XGpio_DiscreteRead(&SW,1);
	if(SW_state==0x01)
		store();
	else
	{
//	for(int i=0;i<256;i++)
//			printf("%d\t%d\n",device_data[0][i],sample_data[0][i]);
		work();
	}
	

}
//@param device_data[6][DATA_LENGTH] stroed device sample data
//@param sample_data[3][DATA_LENGTH] current sample data
void work()
{
	double sim;
	double m_sim[3]={0};
	int m_index[3]={8,8,8};
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<6;j++)
		{
			sim = corss(sample_data[i],device_data[j],DATA_LENGTH);
			if(sim>m_sim[i])
			{
				m_index[i]=j;
				m_sim[i] = sim;
			}
		}
		if(m_sim[i]<0.8)
			m_index[i]=888;
	}
	printf("( %f | %d )\t( %f | %d )\t( %f | %d )\n",m_sim[0],m_index[0],m_sim[1],m_index[1],m_sim[2],m_index[2]);
}
void store()
{
	for(int i=0;i<DATA_LENGTH;i++)
		device_data[kind_ptr][i]=sample_data[0][i];
	printf("store finish. device ID is: %d\n",kind_ptr);
	kind_ptr=(kind_ptr+1)%6;
	//store kind ptr and new device data to falsh      ------------@HHT
	printf("Try to turn to work mode after 3s, please check whether sw0 is pull down.\n \
If you wouldn't quit store mode, please ignore this.\n");
	sleep(3);
}

static void TimerIntrHandler(void *CallBackRef)
{
	XScuTimer *TimerInstancePtr = (XScuTimer *) CallBackRef;

	if (XScuTimer_IsExpired(TimerInstancePtr)) {
		XScuTimer_ClearInterruptStatus(TimerInstancePtr);
		TimerExpired++;
		
		if (TimerExpired == time) {
			XGpio_DiscreteWrite(&CTL,1,0x07);
			XScuTimer_DisableAutoReload(TimerInstancePtr);
		}
	}
}
